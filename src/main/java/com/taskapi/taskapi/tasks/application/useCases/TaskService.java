package com.taskapi.taskapi.tasks.application.useCases;

import com.taskapi.taskapi.tasks.domain.repository.ITaskRepository;

@Service
@RequiredArgsConstructor
@NoArgsConstructor
public class TaskService {
 
    private final ITaskRepository taskRepository;

    // Constructor is generated by @RequiredArgsConstructor
    // If you need a no-args constructor, you can use @NoArgsConstructor as well.

    // Create
    public Task createTask(Task task) {
        return this.taskRepository.save(task);
    }

    // Read
    public List<Task> getAllTasks() {
        return this.taskRepository.findAll();
    }

    public Optional<Task> getTaskById(Long id) {
        return this.taskRepository.findById(id);
    }

    // Update
    public Task updateTask(Long id, Task updatedTask) {
        return this.taskRepository.findById(id)
                .map(task -> {
                    task.setName(updatedTask.getName());
                    task.setDescription(updatedTask.getDescription());
                    task.setStatus(updatedTask.getStatus());
                    return taskRepository.save(task);
                }).orElseThrow(() -> new RuntimeException("Task not found"));
    }

    // Delete
    public void deleteTask(Long id) {
        this.taskRepository.deleteById(id);
    }
}